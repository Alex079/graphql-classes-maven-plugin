
type Query {
    "field 0"field0: String @onField(arg2: 1)
    field1("arg 1"arg1: InputQueryArg1 = {id: "0"}, arg2: [InputQueryArg2!]!, arg3: EnumQueryArg3): TypeQueryField1
    field2(arg2: [InputQueryArg2!]! first: Int before: String after: String): UnionQueryField2Connection @connection(for: "UnionQueryField2")
}

"Input Query Arg 1"
input InputQueryArg1 {
    id: ID!
}

input InputQueryArg2 {
    id: ID!
}

"Enum Query Arg 3 [A](Query)"
enum EnumQueryArg3 {
    V1 V2 V3 V4"""V 5"""V5
}

"""
Type
Query Field 1
"""
type TypeQueryField1 {
    idA: Int!
    idB: Int!
    """
    # H1
    identifier"""id: ID
}

type TreeNode {
    left: TreeNode
    right: TreeNode
    value: String
}

interface Interface1 {
    switch: TreeNode
}

type Type1UnionField2 implements Interface1 {
    fieldA: ID
    switch: TreeNode
}

type Type2UnionField2 implements Interface1 {
    name: String
    switch: TreeNode
    int: Int
}

union UnionQueryField2 = Type1UnionField2 | Type2UnionField2

interface Interface2 {
    name: String
}

type Type3UnionField2 implements Interface2 {
    fieldC: Scalar1
    name: String
}

extend union UnionQueryField2 = Type3UnionField2
