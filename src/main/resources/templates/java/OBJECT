//CHECKSTYLE:OFF
<#macro m_check_null input>
		<#switch input.flag>
		<#case 'MANDATORY'>
		.map(Objects::requireNonNull)
		<@m_check_null input.nested/>
		<#break>
		<#case 'LIST'>
		.filter(Objects::nonNull)
		.flatMap(Collection::stream)
		<@m_check_null input.nested/>
		<#break>
		</#switch>
</#macro>
package ${typesPackage};

<#list importPackages as i>
import ${i}.*;
</#list>

<#if annotationVersion?has_content>@javax.annotation<#if annotationVersion!='1.8'>.processing</#if>.Generated(value = "com.github.alme.graphql.generator.GeneratorMojo", date = "${.now?iso_utc_ms}")</#if>
@SuppressWarnings({"all", "PMD"})
public class ${name}
<#if 0 < members?size>
implements ${members?join(", ")}
</#if>
{
	<#list fields as f>
	<#if jsonProperty?has_content>@${jsonProperty}("${f.name}")</#if>
	private ${f.type.full} ${f.name}<#if jsonProperty?has_content>__</#if>;

	public ${f.type.full} get${f.name?cap_first}() {
		return this.${f.name}<#if jsonProperty?has_content>__</#if>;
	}

	public ${useChainedAccessors?string(name,"void")} set${f.name?cap_first}(${f.type.full} v) {
		java.util.stream.Stream.of(v)
		<@m_check_null f.type/>
		.forEach($ -> {});
		this.${f.name}<#if jsonProperty?has_content>__</#if> = v;<#if useChainedAccessors>
		return this;</#if>
	}

	</#list>
	@Override
	public String toString() {
		return new StringBuilder().append("{")
		<#list fields as f>
			.append(" ${f.name} = ").append(get${f.name?cap_first}())<#sep>.append(",")</#sep>
		</#list>
			.append(" }").toString();
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (!(o instanceof ${name})) return false;
		${name} other = (${name}) o;
		return
		<#list fields as f>
			Objects.equals(this.get${f.name?cap_first}(), other.get${f.name?cap_first}())<#sep> &&</#sep>
		</#list>
		;
	}

	@Override
	public int hashCode() {
		return Objects.hash(
		<#list fields as f>
			get${f.name?cap_first}()<#sep>,</#sep>
		</#list>
		);
	}

}
//CHECKSTYLE:ON
