<#macro addNullCheck fieldType indent>
	<#switch fieldType.flag>
		<#case 'MANDATORY'>
			<#lt/>${indent}.map(java.util.Objects::requireNonNull)
			<@addNullCheck fieldType=fieldType.nested indent=indent/>
		<#break/>
		<#case 'LIST'>
			<#lt/>${indent}.filter(java.util.Objects::nonNull)
			<#lt/>${indent}.flatMap(java.util.Collection::stream)
			<@addNullCheck fieldType=fieldType.nested indent=indent/>
		<#break/>
	</#switch>
</#macro>

<#function getFieldType field nested>
	<#if field.selections?has_content>
		<#return field.type.getCustom(currentPackage+nested?then('.'+field.name+'.','.')+field.type.inner+'Result') />
	<#else>
		<#return field.type.full />
	</#if>
</#function>

<#function getFieldName field>
	<#if field.fragmentTypeName?has_content>
		<#return field.name + '$' + field.fragmentTypeName />
	<#else>
		<#return field.name />
	</#if>
</#function>

<#macro addField field indent nested>
	<#if jsonProperty?has_content>
		<#lt/>${indent}@${jsonProperty}("${getFieldName(field)}")
	</#if>
	<#lt/>${indent}private ${getFieldType(field,nested)} ${getFieldName(field)}<#if jsonProperty?has_content>__</#if> = null;
</#macro>

<#macro addGetter field indent nested>
	<#lt/>${indent}public ${getFieldType(field,nested)} get${getFieldName(field)?cap_first}() {
	<#lt/>${indent}	return this.${getFieldName(field)}<#if jsonProperty?has_content>__</#if>;
	<#lt/>${indent}}
</#macro>

<#macro addSetter className field indent nested>
	<#lt/>${indent}public ${methodChaining?then(className,"void")} set${getFieldName(field)?cap_first}(${getFieldType(field,nested)} v) {
	<#lt/>${indent}	java.util.stream.Stream.of(v)
	<@addNullCheck fieldType=field.type indent=indent+'\t\t'/>
	<#lt/>${indent}		.forEach($ -> {});
	<#lt/>${indent}	this.${getFieldName(field)}<#if jsonProperty?has_content>__</#if> = v;
	<#if methodChaining>
		<#lt/>${indent}	return this;
	</#if>
	<#lt/>${indent}}
</#macro>

<#macro addFields className fields indent nested>
	<#list fields as field>
		<@addField field=field indent=indent nested=nested/>
		<@addGetter field=field indent=indent nested=nested/>
		<#if !dtoBuilder>
			<@addSetter className=className field=field indent=indent nested=nested/>
		</#if>
	</#list>
</#macro>

<#macro addBuilderFields className fields indent nested>
	<#list fields as field>
		<@addField field=field indent=indent nested=nested/>
		<@addSetter className=className field=field indent=indent nested=nested/>
	</#list>
</#macro>

<#macro addSelectionFields className fields indent nested>
	<#list fields as field>
		<#if field.selections?has_content>
			<#lt/>${indent}public ${className} with${field.name?cap_first}(java.util.function.Consumer<${field.type.inner}Selector> consumer) {
			<#if getFieldName(field) != field.name>
				<#lt/>${indent}	documentBuilder.append(" ${getFieldName(field)}:");
			</#if>
			<#lt/>${indent}	documentBuilder.append(" ${field.name} {");
			<#lt/>${indent}	consumer.accept(new ${field.type.inner}Selector(documentBuilder));
			<#lt/>${indent}	documentBuilder.append(" }");
			<#lt/>${indent}	return this;
			<#lt/>${indent}}
		<#else>
			<#lt/>${indent}public ${className} with${field.name?cap_first}() {
			<#if getFieldName(field) != field.name>
				<#lt/>${indent}	documentBuilder.append(" ${getFieldName(field)}:");
			</#if>
			<#lt/>${indent}	documentBuilder.append(" ${field.name}");
			<#lt/>${indent}	return this;
			<#lt/>${indent}}
		</#if>
	</#list>
</#macro>

<#macro addVariables className variables indent>
	<#list variables as field>
		<#lt/>${indent}public ${className} set${field.name?cap_first}(${field.type.full} value) {
		<#lt/>${indent}	map.put("${field.name}", value);
		<#lt/>${indent}	return this;
		<#lt/>${indent}}
	</#list>
</#macro>

<#macro addEquals className fields indent>
	<#lt/>${indent}@Override
	<#lt/>${indent}public boolean equals(Object o) {
	<#lt/>${indent}	if (this == o) return true;
	<#lt/>${indent}	if (!(o instanceof ${className})) return false;
	<#list fields>
		<#lt/>${indent}	${className} other = (${className}) o;
		<#lt/>${indent}	return
		<#items as field>
			<#lt/>${indent}		java.util.Objects.equals(this.get${getFieldName(field)?cap_first}(), other.get${getFieldName(field)?cap_first}())<#sep> &&</#sep>
		</#items>
		<#lt/>${indent}	;
	<#else>
		<#lt/>${indent}	return true;
	</#list>
	<#lt/>${indent}}
</#macro>

<#macro addHashCode fields indent>
	<#lt/>${indent}@Override
	<#lt/>${indent}public int hashCode() {
	<#lt/>${indent}	return java.util.Objects.hash(
	<#list fields as field>
		<#lt/>${indent}		get${getFieldName(field)?cap_first}()<#sep>,</#sep>
	</#list>
	<#lt/>${indent}	);
	<#lt/>${indent}}
</#macro>

<#macro addToString fields indent>
	<#lt/>${indent}@Override
	<#lt/>${indent}public String toString() {
	<#lt/>${indent}	return new StringBuilder().append("{")
	<#list fields as field>
		<#lt/>${indent}		.append(" ${getFieldName(field)} = ").append(get${getFieldName(field)?cap_first}())<#sep>.append(",")</#sep>
	</#list>
	<#lt/>${indent}		.append(" }")
	<#lt/>${indent}		.toString();
	<#lt/>${indent}}
</#macro>

<#macro addConstructor className fields indent nested>
	<#lt/>${indent}private ${className}(
	<#list fields as field>
		<#lt/>${indent}	${getFieldType(field,nested)} ${getFieldName(field)}<#if jsonProperty?has_content>__</#if><#sep>,</#sep>
	</#list>
	<#lt/>${indent}) {
	<#list fields as field>
		<#lt/>${indent}	this.${getFieldName(field)}<#if jsonProperty?has_content>__</#if> = ${getFieldName(field)}<#if jsonProperty?has_content>__</#if>;
	</#list>
	<#lt/>${indent}}
</#macro>

<#macro addBuilderMethod indent>
	<#lt/>${indent}public static Builder builder() {
	<#lt/>${indent}	return new Builder();
	<#lt/>${indent}}
</#macro>

<#macro addBuildMethod resultClassName fields indent>
	<#lt/>${indent}public ${resultClassName} build() {
	<#lt/>${indent}	return new ${resultClassName}(
	<#list fields as field>
		<#lt/>${indent}		${getFieldName(field)}<#if jsonProperty?has_content>__</#if><#sep>,</#sep>
	</#list>
	<#lt/>${indent}	);
	<#lt/>${indent}}
</#macro>
