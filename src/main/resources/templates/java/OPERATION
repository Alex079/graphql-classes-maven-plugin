<#macro m_selection selectionList>
		<#list selectionList as input>

		<#if jsonProperty?has_content>@${jsonProperty}("${input.name}")</#if>
		<#if input.selection?has_content>
		private final ${input.type.getCustom(input.name?cap_first)} ${input.name}<#if jsonProperty?has_content>__</#if> = null;

		public ${input.type.getCustom(input.name?cap_first)} get${input.name?cap_first}() {
			return this.${input.name}<#if jsonProperty?has_content>__</#if>;
		}

		public static class /*${input.type.inner}=>*/${input.name?cap_first} {
		<@m_selection input.selection/>

		}
		<#else>
		private final ${input.type.full} ${input.name}<#if jsonProperty?has_content>__</#if> = null;

		public ${input.type.full} get${input.name?cap_first}() {
			return this.${input.name}<#if jsonProperty?has_content>__</#if>;
		}
		</#if>
		</#list>

		public String toString() {
			return new StringBuilder().append("{")
			<#list selectionList as input>
			.append(" ${input.name} = ").append(get${input.name?cap_first}())
			</#list>
			.append(" }").toString();
		}
</#macro>

<#macro m_check_null input>
			<#switch input.flag>
			<#case 'MANDATORY'>
			.map(Objects::requireNonNull)
			<@m_check_null input.nested/>
			<#break>
			<#case 'LIST'>
			.flatMap(Collection::stream)
			<@m_check_null input.nested/>
			<#break>
			</#switch>
</#macro>
package ${basePackage};

import ${typesPackage}.*;

<#list importPackages as i>
import ${i}.*;
</#list>

public class ${className}
implements ${interfaceName}<${className}.Variables, ${className}.Result>
{

	private static final String DOCUMENT = <#if text??>"${text?j_string}"<#else>null</#if>;

	public String getDocument() {
		return DOCUMENT;
	}

	private static final String OPERATION = <#if name??>"${name}"<#else>null</#if>;

	public String getOperation() {
		return OPERATION;
	}

	private final Variables variables = new Variables();

	public Variables getVariables() {
		return variables;
	}

	public Map<String, Object> getVariablesAsMap() {
		return variables.asMap();
	}

	public Class<Result> getResultClass() {
		return Result.class;
	}

	public static class Variables {

		private final transient Map<String, Object> $values = new HashMap<>();

		public Map<String, Object> asMap() {
			return Collections.unmodifiableMap($values);
		}
		<#list variables as v>

		<#if jsonProperty?has_content>@${jsonProperty}("${v.name}")</#if>
		private ${v.type.full} ${v.name}<#if jsonProperty?has_content>__</#if>;
	
		public ${v.type.full} get${v.name?cap_first}() {
			return this.${v.name}<#if jsonProperty?has_content>__</#if>;
		}

		public Variables set${v.name?cap_first}(${v.type.full} v) {
			java.util.stream.Stream.of(v)
			<@m_check_null v.type/>
			.forEach(($) -> {});
			this.${v.name}<#if jsonProperty?has_content>__</#if> = v;
			this.$values.put("${v.name}", v);
			return this;
		}
		</#list>
	}

	public static class /*${type.inner}=>*/Result {
		<@m_selection selection/>

	}

}
