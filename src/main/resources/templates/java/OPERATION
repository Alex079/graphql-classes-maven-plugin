package ${basePackage};

<#macro m_selection input>
		<#if jsonProperty?has_content>@${jsonProperty}("${input.name}")</#if>
		<#if input.selection?has_content>
		private final ${input.type.getCustom(input.name?cap_first)} ${input.name}<#if jsonProperty?has_content>__</#if> = null;

		public ${input.type.getCustom(input.name?cap_first)} get${input.name?cap_first}() {
			return this.${input.name}<#if jsonProperty?has_content>__</#if>;
		}

		public final class /*${input.type.inner}=>*/${input.name?cap_first} {
		
		<#list input.selection as s>
		<@m_selection s/>
		</#list>
		}

		<#else>
		private final ${input.type.full} ${input.name}<#if jsonProperty?has_content>__</#if> = null;

		public ${input.type.full} get${input.name?cap_first}() {
			return this.${input.name}<#if jsonProperty?has_content>__</#if>;
		}

		</#if>
</#macro>

<#macro m_check_null input>
			<#switch input.flag>
			<#case 'MANDATORY'>
			.map(Objects::requireNonNull)
			<@m_check_null input.nested/>
			<#break>
			<#case 'LIST'>
			.flatMap(Collection::stream)
			<@m_check_null input.nested/>
			<#break>
			</#switch>
</#macro>

import ${typesPackage}.*;

import java.math.*;
import java.net.*;
import java.util.*;

public final class ${className} implements ${interfaceName}<${className}.Variables, ${className}.Result>
{

	private final String document = <#if text??>"${text?j_string}"<#else>null</#if>;

	public String getDocument() {
		return document;
	}

	private final String operation = <#if name??>"${name}"<#else>null</#if>;

	public String getOperation() {
		return operation;
	}

	private final Variables variables = new Variables();

	public Variables getVariables() {
		return variables;
	}

	public Class<Result> getResultClass() {
		return Result.class;
	}

	public final class Variables {

		<#list variables as v>
		<#if jsonProperty?has_content>@${jsonProperty}("${v.name}")</#if>
		private ${v.type.full} ${v.name}<#if jsonProperty?has_content>__</#if>;
	
		public ${v.type.full} get${v.name?cap_first}() {
			return this.${v.name}<#if jsonProperty?has_content>__</#if>;
		}

		public Variables set${v.name?cap_first}(${v.type.full} v) {
			java.util.stream.Stream.of(v)
			<@m_check_null v.type/>
			.forEach(($) -> {});
			this.${v.name}<#if jsonProperty?has_content>__</#if> = v;
			return this;
		}

		</#list>
	}

	public final class /*${type.inner}=>*/Result {

		<#list selection as s>
		<@m_selection s/>
		</#list>
	}

}
