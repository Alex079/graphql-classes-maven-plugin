//CHECKSTYLE:OFF
<#macro m_selection selectionList name>
		<#list selectionList as input>
		<#if jsonProperty?has_content>@${jsonProperty}("${input.name}")</#if>
		<#if input.selections?has_content>
		private ${input.type.getCustom(input.name?cap_first)} ${input.name}<#if jsonProperty?has_content>__</#if> = null;

		public ${input.type.getCustom(input.name?cap_first)} get${input.name?cap_first}() {
			return this.${input.name}<#if jsonProperty?has_content>__</#if>;
		}

		public ${useChainedAccessors?string(name,"void")} set${input.name?cap_first}(${input.type.getCustom(input.name?cap_first)} v) {
			java.util.stream.Stream.of(v)
			<@m_check_null input.type/>
			.forEach($ -> {});
			this.${input.name}<#if jsonProperty?has_content>__</#if> = v;<#if useChainedAccessors>
			return this;</#if>
		}

		public static class /*${input.type.inner}=>*/${input.name?cap_first}
		{
			<@m_selection input.selections input.name?cap_first/>
		}
		<#else>
		private ${input.type.full} ${input.name}<#if jsonProperty?has_content>__</#if> = null;

		public ${input.type.full} get${input.name?cap_first}() {
			return this.${input.name}<#if jsonProperty?has_content>__</#if>;
		}

		public ${useChainedAccessors?string(name,"void")} set${input.name?cap_first}(${input.type.full} v) {
			java.util.stream.Stream.of(v)
			<@m_check_null input.type/>
			.forEach($ -> {});
			this.${input.name}<#if jsonProperty?has_content>__</#if> = v;<#if useChainedAccessors>
			return this;</#if>
		}
		</#if>

		</#list>
		public String toString() {
			return new StringBuilder().append("{")
			<#list selectionList as input>
			.append(" ${input.name} = ").append(get${input.name?cap_first}())<#sep>.append(",")</#sep>
			</#list>
			.append(" }").toString();
		}

</#macro>

<#macro m_check_null input>
			<#switch input.flag>
			<#case 'MANDATORY'>
			.map(Objects::requireNonNull)
			<@m_check_null input.nested/>
			<#break>
			<#case 'LIST'>
			.filter(Objects::nonNull)
			.flatMap(Collection::stream)
			<@m_check_null input.nested/>
			<#break>
			</#switch>
</#macro>
package ${basePackage};

import ${typesPackage}.*;

<#list importPackages as i>
import ${i}.*;
</#list>

<#if annotationVersion?has_content>@javax.annotation<#if annotationVersion!='1.8'>.processing</#if>.Generated(value = "com.github.alme.graphql.generator.GeneratorMojo", date = "${.now?iso_utc_ms}")</#if>
@SuppressWarnings({"all", "PMD"})
public class ${className}
implements ${interfaceName}<${className}.Variables, ${className}.Result>
{
	private static final String DOCUMENT = <#if text??>"${text?j_string}"<#else>null</#if>;

	public String getDocument() {
		return DOCUMENT;
	}

	private static final String OPERATION = <#if name??>"${name}"<#else>null</#if>;

	public String getOperation() {
		return OPERATION;
	}

	<#if jsonProperty?has_content>@${jsonProperty}("variables")</#if>
	private final Variables variables = new Variables();

	public Variables getVariables() {
		return variables;
	}

	public Map<String, Object> getVariablesAsMap() {
		return variables.asMap();
	}

	public Class<Result> getResultClass() {
		return Result.class;
	}

	public static class Variables
	{
		private final transient Map<String, Object> $values = new HashMap<>();

		public Map<String, Object> asMap() {
			return Collections.unmodifiableMap($values);
		}

		<#list variables as v>
		<#if jsonProperty?has_content>@${jsonProperty}("${v.name}")</#if>
		private ${v.type.full} ${v.name}<#if jsonProperty?has_content>__</#if>;

		public ${v.type.full} get${v.name?cap_first}() {
			return this.${v.name}<#if jsonProperty?has_content>__</#if>;
		}

		public ${useChainedAccessors?string("Variables","void")} set${v.name?cap_first}(${v.type.full} v) {
			java.util.stream.Stream.of(v)
			<@m_check_null v.type/>
			.forEach($ -> {});
			this.${v.name}<#if jsonProperty?has_content>__</#if> = v;
			this.$values.put("${v.name}", v);<#if useChainedAccessors>
			return this;</#if>
		}

		</#list>
		public String toString() {
			return new StringBuilder().append("{")
			<#list variables as v>
			.append(" ${v.name} = ").append(get${v.name?cap_first}())<#sep>.append(",")</#sep>
			</#list>
			.append(" }").toString();
		}

	}

	public static class /*${typeName}=>*/Result
	{
		<@m_selection selections 'Result'/>
	}

	public String toString() {
		return new StringBuilder().append("{")
		.append(" document = ").append(getDocument())
		.append(", operation = ").append(getOperation())
		.append(", variables = ").append(getVariables())
		.append(" }").toString();
	}

}
//CHECKSTYLE:ON
